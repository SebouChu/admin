<% content_for :title, @block %>
<div id="app" v-cloak>
  <div class="spinner-border text-primary" role="status">
    <span class="sr-only"><%= t 'loading' %></span>
  </div>
  <%= simple_form_for [:admin, @block] do |f| %>
    <%= f.error_notification %>
    <%= f.error_notification message: f.object.errors[:base].to_sentence if f.object.errors[:base].present? %>

    <div class="row">
      <div class="col-xxl-4 col-md-6">
        <%= f.input :title %>
      </div>
    </div>
    <%= render "admin/communication/blocks/templates/#{@block.template_kind}/edit", f: f %>
    <textarea name="communication_block[data]" rows="20" cols="200" class="d-non">
      {{ JSON.stringify(data) }}
    </textarea>
    <% content_for :action_bar_right do %>
      <%= submit f %>
    <% end %>
  <% end %>
</div>

<%# Include vue.js before call Vue.createApp %>
<%= javascript_include_tag 'vue' %>

<script>
  var app = Vue.createApp({
    components: {
      draggable: VueDraggableNext.VueDraggableNext,
    },
    data() {
      return {
        directUpload: {
          url: "<%= rails_direct_uploads_url.html_safe %>",
          blobUrlTemplate: "<%= rails_service_blob_url(":signed_id", ":filename").html_safe %>"
        },
        data: <%= @block.data.to_json.html_safe %>,
        <% if @block.template.default_element %>
        defaultElement: <%= @block.template
                                  .default_element
                                  .default_data
                                  .to_json
                                  .html_safe %>
        <% end %>
      }
    },
    methods: {
      // TODO : create a uploader vue3 component
      onFileImageChange(event, object, key) {
        var files = event.target.files || event.dataTransfer.files;
        if (!files.length)
          return;
        this.uploadFile(files[0], object, key);
      },
      uploadFile(file, object, key) {
        var url = this.directUpload.url;
        var upload = new ActiveStorage.DirectUpload(file, url);
        upload.create(function (error, blob) {
          if (error) {
            console.log(error);
          } else {
            object[key] = {
              id: blob.id,
              signed_id: blob.signed_id,
              filename: blob.filename
            };
          }
        }.bind(this));
      },
      getFileUrl(signed_id, filename) {
        return this.directUpload.blobUrlTemplate
          .replace(':signed_id', signed_id)
          .replace(':filename', filename);
      },
      getImageUrl(data) {
        return this.getFileUrl(data.signed_id, data.filename);
      },
      handleSummernotes() {
        var $summernoteElements = $('.summernote-vue');

        $summernoteElements.each(function(index){
          this.initSummernote($summernoteElements.get(index));
        }.bind(this));
      },
      initSummernote(element) {
        var config = element.getAttribute('data-summernote-config') || 'default';

        $(element).summernote({
          toolbar: window.SUMMERNOTE_CONFIGS[config].toolbar, // Dependent of app/assets/javascripts/admin/plugins/summernote.js
          followingToolbar: true,
          disableDragAndDrop: true,
          callbacks: {
            onChange: function(contents, $editable) {
              element.value = contents;
              element.dispatchEvent(new Event('input'));
            }.bind(this)
          }
        });
      }
    },
    mounted: function() {
      this.handleSummernotes();
    }
  });

  window.addEventListener('load', function(){
    setTimeout(function() {
      app.mount('#app');
    }, 1000);
  });
</script>
